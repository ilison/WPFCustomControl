#region Copyright Syncfusion Inc. 2001-2017.
// Copyright Syncfusion Inc. 2001-2017. All rights reserved.
// Use of this code is subject to the terms of our license.
// A copy of the current license can be obtained at any time by e-mailing
// licensing@syncfusion.com. Any infringement will be prosecuted under
// applicable laws. 
#endregion
using Syncfusion.Data;
using Syncfusion.UI.Xaml.Grid;
using Syncfusion.UI.Xaml.Grid.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
#if UWP
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Data;
# else
using System.Windows.Data;
using System.Windows.Controls;
using System.Windows.Media;
#endif
namespace Syncfusion.UI.Xaml.Grid
{
#if WPF
    public class SfGridColumnBase<T> : Freezable, IDisposable where T : SfGridBase
#else
    public class SfGridColumnBase<T> : DependencyObject, IDisposable where T : SfGridBase
#endif
    {
        internal T GridBase { get; set; }

        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {

        }

#if WPF
        protected override Freezable CreateInstanceCore()
        {
            throw new NotImplementedException();
        }
#endif
    }

    public abstract class GridColumnBase : SfGridColumnBase<SfGridBase>
    {
        internal TextTrimming textTrimming = TextTrimming.None;
        internal TextWrapping textWrapping =
#if WPF
 TextWrapping.NoWrap;
#else
            TextWrapping.Wrap;
#endif
#if WPF
        internal TextDecorationCollection textDecoration = new TextDecorationCollection();
        internal Typeface drawingTypeface = null;
#endif                
        internal bool isdisplayingbindingcreated { get; set; }
        internal bool isvaluebindingcreated { get; set; }
        internal bool isDisplayMultiBinding { get; set; }
        internal bool isValueMultiBinding { get; set; }
        internal string mappingName { get; set; }


        internal bool hasFontSize = false;
        internal bool hasFontFamily = false;
        internal bool hasMargin = false;
        internal bool hasFontWeight = false;
        internal bool hasFontStretch = false;
        internal GridColumnWrapper _columnWrapper { get; set; }
        internal GridDisplayColumnWrapper _displaycolumnWrapper { get; set; }
        internal bool isTemplate = false;
        internal bool isDropDown = false;
        internal bool isAutogenerated;
        internal bool canUpdateBinding = false;
        internal bool hasCellTemplate;
        internal bool hasCellTemplateSelector;
        internal bool hasHeaderTemplate;
        internal bool hasCellStyle;
        internal bool hasCellStyleSelector;
        internal bool hasHeaderStyle;
        private bool isdisposed = false;
        internal bool IsInSuspend = false;
        internal bool hasToolTipTemplate;
        internal bool hasHeaderToolTipTemmplate;
        internal bool hasToolTipTemplateSelector;

        internal GridDisplayColumnWrapper DisplayColumnWrapper
        {
            get
            {
                if (_displaycolumnWrapper == null)
                {
                    _displaycolumnWrapper = new GridDisplayColumnWrapper();
                    _displaycolumnWrapper.SetDisplayBinding(this.DisplayBinding);
                }
                return _displaycolumnWrapper;
            }
            set { _displaycolumnWrapper = value; }
        }

        internal GridColumnWrapper ColumnWrapper
        {
            get
            {
                if (_columnWrapper == null)
                {
                    _columnWrapper = new GridColumnWrapper();
                    _columnWrapper.SetValueBinding(this.ValueBinding);
                }
                return _columnWrapper;
            }
            set { _columnWrapper = value; }
        }

        internal Thickness padding = new Thickness(0);
        internal TextAlignment textAlignment = TextAlignment.Left;
        internal VerticalAlignment verticalAlignment = VerticalAlignment.Center;

        /// <summary>
        /// Gets a value that determines whether the column is generated automatically. 
        /// </summary>
        /// <value>
        /// <b>true</b> if the column is generated automatically ; otherwise , <b>false</b>.
        /// </value>
        public bool IsAutoGenerated
        {
            get { return isAutogenerated; }
            internal set { isAutogenerated = value; }
        }

        /// <summary>
        /// Denotes whether the column is type of GridTemplateColumn.
        /// </summary>
        protected internal bool IsTemplate
        {
            get { return isTemplate; }
            set { isTemplate = value; }
        }

        /// <summary>
        /// Gets the actual width of the column.
        /// </summary>
        /// <value>
        /// The actual width of the column.
        /// </value>        
        [Cloneable(false)]
        public double ActualWidth
        {
            get { return (double)GetValue(ActualWidthProperty); }
            internal set { SetValue(ActualWidthProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.ActualWidth dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.ActualWidth dependency
        /// property.
        /// </remarks>        
        public static readonly DependencyProperty ActualWidthProperty =
            GridDependencyProperty.Register("ActualWidth", typeof(double), typeof(GridColumnBase), new GridPropertyMetadata(Double.NaN));

        /// <summary>
        ///  Denotes whether the column is type of GridComboBoxColumn or GridMultiColumnDropDownList.
        /// </summary>
        internal bool IsDropDown
        {
            get { return isDropDown; }
            set { isDropDown = value; }
        }
        // To keep the column width when column sizer is SizeToCells/Auto/AutoWithLastColumnFill/AutoLastColumnFill
        // If the column sizer is refreshed, no need to recalculate the width frequently. If AutoWidth is set, we can directly use it.
        internal double AutoWidth = double.NaN;

        #region Dependency property

        /// <summary>
        /// Gets or sets the name to map the data member in the underlying data object to
        /// SfDataGrid .
        /// </summary>
        /// <value>
        /// The name that maps the data member in the underlying data object. The default
        /// value is null.
        /// </value>
        public string MappingName
        {
            get
            {
                var mappingname = (string)GetValue(MappingNameProperty);
                if (String.IsNullOrEmpty(mappingname) && (_valueBinding != null || _displayBinding != null))
                {
                    var validbinding = _valueBinding ?? _displayBinding;
#if WPF
                    if (isValueMultiBinding)
                        return (((validbinding as MultiBinding).Bindings[0]) as Binding).Path.Path;
#endif
                    return (validbinding as Binding).Path.Path;
                }
                return mappingname;
            }
            set { SetValue(MappingNameProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.MappingName dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.MappingName dependency
        /// property.
        /// </remarks>        
        public static readonly DependencyProperty MappingNameProperty =
            GridDependencyProperty.Register("MappingName", typeof(string), typeof(GridColumnBase), new GridPropertyMetadata(null, OnMappingNameChanged));

        /// <summary>
        /// Called when Mapping Name is changed for GridColumns.
        /// </summary>
        /// <param name="d">The d.</param>
        /// <param name="e">The <see cref="DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        private static void OnMappingNameChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var gridColumn = (GridColumnBase)d;
            var mappingName = (string)e.NewValue;
            //Helper Methods from BindingUtility - Creating a new Display/Value Binding to Update the Column RunTime.
            if (gridColumn.isdisplayingbindingcreated)
            {
                gridColumn._displayBinding = null;
            }
            if (gridColumn.isvaluebindingcreated)
            {
                gridColumn.SetValueBinding(true, mappingName.CreateEditableBinding(gridColumn, true));
            }
            if (gridColumn.HeaderText == null || String.Equals(gridColumn.HeaderText, (string)e.OldValue))
                gridColumn.HeaderText = mappingName;
            gridColumn.mappingName = gridColumn.MappingName;
        }

        /// <summary>
        /// Gets or sets the text that is displayed on the header cell of column.
        /// </summary>
        /// <value>
        /// A string that is displayed on the header cell of column.
        /// </value>
        public string HeaderText
        {
            get { return (string)GetValue(HeaderTextProperty); }
            set { SetValue(HeaderTextProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderText dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderText dependency
        /// property.
        /// </remarks>        
        public static readonly DependencyProperty HeaderTextProperty =
            GridDependencyProperty.Register("HeaderText", typeof(string), typeof(GridColumnBase), new GridPropertyMetadata(null,OnUpdateBindingInfo));

        /// <summary>
        /// Updates the binding for the property changes associated with column.
        /// </summary>
        /// <param name="d">The dependency property that contains the property changes.</param>
        /// <param name="e">The System.DependencyPropertyChangedEventArgs instance that contains the data for various events. </param>        
        /// <exception cref="System.ArgumentException">Thrown when the currency decimal separator has empty string in GridCurrencyColumn.</exception>
        /// <exception cref="System.ArgumentOutOfRangeException"> Thrown when the currency positive pattern value is greater than 3 in GridCurrencyColumn.</exception> 
        /// <exception cref="System.ArgumentOutOfRangeException"> Thrown when the currency negative pattern value is greater that 15 in GridCurrencyColumn.</exception>
        /// <exception cref="System.ArgumentException"> Thrown when the percent decimal separator has empty string in GridPercentColumn.</exception>
        /// <exception cref="System.ArgumentOutOfRangeException"> Thrown when the percent positive pattern value is greater than 3 in GridPercentColumn.</exception>
        /// <exception cref="System.ArgumentOutOfRangeException"> Thrown when the percent negative pattern value is greater that 11 in GridPercentColumn.</exception>
        /// <exception cref="System.ArgumentException"> Thrown when the number decimal separator has empty string in GridNumericColumn.</exception>
        /// <exception cref="System.ArgumentOutOfRangeException"> Thrown when the number negative pattern is greater than 4 in GridNumericColumn.</exception>
        public static void OnUpdateBindingInfo(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnUpdateBindingInfo(e);
        }

        internal virtual void OnUpdateBindingInfo(DependencyPropertyChangedEventArgs e)
        {
            this.textAlignment = this.TextAlignment;
            this.verticalAlignment = this.VerticalAlignment;

            if (this.padding == this.Padding || e.Property.Equals(GridColumnBase.PaddingProperty))            
                ProcessUIElementPadding(this);            
            this.UpdateBindingInfo();
        }

        /// <summary>
        /// Gets or sets a value that indicates whether user can edit the cells of the column in SfDataGrid control.
        /// </summary>
        /// <value>
        /// <b>true</b> if the user can edit the cell of the column; otherwise, <b>false</b>. 
        /// The default value is <b>false</b>.
        /// </value>        
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.AllowEditing"/>
        public bool AllowEditing
        {
            get
            {
                var valueColumn = this.ReadLocalValue(GridColumnBase.AllowEditingProperty);
                if (GridBase != null && valueColumn == DependencyProperty.UnsetValue)
                    return this.GridBase.AllowEditing;
                else
                    return (bool)GetValue(AllowEditingProperty);
            }
            set
            {
                SetValue(AllowEditingProperty, value);

                //WPF-19009 - When AllowEditing of a grid is true and changing AllowEditing of a checkbox column as false in run time 
                //since AllowEditing default value is false, allowediting dependency call back won't fire. We need to update the bindings.
                this.UpdateBindingBasedOnAllowEditing();
            }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.AllowEditing dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.AllowEditing dependency property.
        /// </remarks>         
        public static readonly DependencyProperty AllowEditingProperty =
            GridDependencyProperty.Register("AllowEditing", typeof(bool), typeof(GridColumnBase), new GridPropertyMetadata(false, OnAllowEditingChanged));
        private static void OnAllowEditingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnAllowEditingChanged(e);
        }
        internal virtual void OnAllowEditingChanged(DependencyPropertyChangedEventArgs e)
        {

        }
        /// <summary>
        /// Gets or sets a value to enable the built-in validation (IDataErrorInfo/DataAnnonations) to validate the user input and displays the error.
        /// </summary>
        /// <value>
        /// One of the <see cref="Syncfusion.UI.Xaml.Grid.GridValidationMode"/> enumeration that specifies how the cells are validated with in the column.
        /// The default mode is <see cref="Syncfusion.UI.Xaml.Grid.GridValidationMode.None"/>. 
        /// </value>        
        /// <remarks>
        /// The <see cref="Syncfusion.UI.Xaml.Grid.GridValidationMode"/> process the built-in validations when data object implements <see cref="System.ComponentModel.IDataErrorInfo"/>,<see cref="System.ComponentModel.INotifyDataErrorInfo"/> and <see cref="System.ComponentModel.DataAnnotations"/>.
        /// The validation can also be done using CurrentCellValidating and RowValidating events in SfDataGrid and SfTreeGrid.
        /// </remarks>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfGridBase.GridValidationMode"/>
        public GridValidationMode GridValidationMode
        {
            get
            {
                var valueColumn = this.ReadLocalValue(GridColumn.GridValidationModeProperty);
                if (GridBase != null && valueColumn == DependencyProperty.UnsetValue)
                    return this.GridBase.GridValidationMode;
                return (GridValidationMode)GetValue(GridValidationModeProperty);
            }
            set
            {
                SetValue(GridValidationModeProperty, value);
                if (GridValidationMode == Grid.GridValidationMode.None)
                    this.UpdateValidationMode();
            }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumnBase.GridValidationMode dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumnBase.GridValidationMode dependency property.
        /// </remarks>         
        public static readonly DependencyProperty GridValidationModeProperty =
            GridDependencyProperty.Register("GridValidationMode", typeof(GridValidationMode), typeof(GridColumnBase), new GridPropertyMetadata(GridValidationMode.None, OnGridValidationPropertyChanded));

        private static void OnGridValidationPropertyChanded(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = d as GridColumnBase;
            column.OnGridValidationModeChanged(e);
        }
        internal virtual void OnGridValidationModeChanged(DependencyPropertyChangedEventArgs e)
        {

        }
        internal virtual void UpdateValidationMode()
        {

        }

        /// <summary>
        /// Gets or sets the timing of binding source updates in the column.
        /// </summary>
        /// <value>
        /// One of the <see cref="System.Windows.Data.UpdateSourceTrigger"/> enumeration that specifies the timing of binding updates.
        /// The default value is <see cref="System.Windows.Data.UpdateSourceTrigger.Default"/> .
        /// </value>
        public UpdateSourceTrigger UpdateTrigger
        {
            get { return (UpdateSourceTrigger)GetValue(UpdateTriggerProperty); }
            set { SetValue(UpdateTriggerProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.UpdateTrigger dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.UpdateTrigger dependency property.
        /// </remarks>        
        public static readonly DependencyProperty UpdateTriggerProperty =
            GridDependencyProperty.Register("UpdateTrigger", typeof(UpdateSourceTrigger), typeof(GridColumnBase), new GridPropertyMetadata(UpdateSourceTrigger.Default));


        /// <summary>
        /// Gets or sets the space between the edge of the cell and its content of the column.
        /// </summary>
        /// <value>
        /// The space between the edge of the cell and its content in the column.
        /// </value>
        public Thickness Padding
        {
            get { return (Thickness)GetValue(PaddingProperty); }
            set { SetValue(PaddingProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.TreeGridColumn.Padding dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.TreeGridColumn.Padding dependency property.
        /// </remarks>         
        public static readonly DependencyProperty PaddingProperty =
            GridDependencyProperty.Register("Padding", typeof(Thickness), typeof(GridColumnBase), new GridPropertyMetadata(new Thickness(0, 0, 0, 0), OnUpdateBindingInfo));

        /// <summary>
        /// Gets or sets a value that indicates whether the cells of the column enabled for user interaction like selection, editing and etc. 
        /// </summary>
        /// <value>
        /// <b>true</b> if the column allows user interactions like selection and editing; otherwise, <b>false</b>.
        /// The default value is <b>true</b>.
        /// </value>  
        public bool AllowFocus
        {
            get { return (bool)GetValue(AllowFocusProperty); }
            set { SetValue(AllowFocusProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.AllowFocus dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.AllowFocus dependency property.
        /// </remarks>         
        public static readonly DependencyProperty AllowFocusProperty =
            GridDependencyProperty.Register("AllowFocus", typeof(bool), typeof(GridColumnBase), new GridPropertyMetadata(true));

        /// <summary>
        /// Gets or sets <see cref="System.Windows.DataTemplate"/> that defines the visual representation of the header cell in GridColumn.
        /// </summary>    
        /// <value>
        /// The object that defines the visual representation of the header cell in GridColumn. The default value is <b>null</b>.
        /// </value>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.HeaderTemplate"/>
        public DataTemplate HeaderTemplate
        {
            get { return (DataTemplate)GetValue(HeaderTemplateProperty); }
            set { SetValue(HeaderTemplateProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderTemplate dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderTemplate dependency property.
        /// </remarks>         
        public static readonly DependencyProperty HeaderTemplateProperty =
            GridDependencyProperty.Register("HeaderTemplate", typeof(DataTemplate), typeof(GridColumnBase), new GridPropertyMetadata(null, OnHeaderTemplateChanged));
        
        /// <summary>
        /// Dependency call back for HeaderTemplate property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnHeaderTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnHeaderDataTemplateChanged(e);
        }

        internal virtual void OnHeaderDataTemplateChanged(DependencyPropertyChangedEventArgs e)
        {
            this.hasHeaderTemplate = e.NewValue != null;
        }

        /// <summary>
        /// Gets or sets the <see cref="System.Windows.DataTemplate"/> that is used to display the contents of a cell that is in display mode.
        /// </summary>
        /// <value>
        /// The template that is used to display the contents of cell in a column that is in display mode. The default value is <b>null</b>.
        /// </value>
        /// <remarks>
        /// The <see cref="Syncfusion.UI.Xaml.Grid.GridColumn.SetCellBoundValue"/> decides whether the data context of the <b>CellTemplate</b> is based on Record or <see cref="Syncfusion.UI.Xaml.Grid.DataContextHelper"/> class.        
        /// By default ,the Record is set as the DataContext for template. If SetCellBoundValue is true, the <see cref="Syncfusion.UI.Xaml.Grid.DataContextHelper"/> will be set.
        /// To define template for a cell that is in edit mode, use <see cref="Syncfusion.UI.Xaml.Grid.GridTemplateColumn.EditTemplate"/>.
        ///</remarks>
        public DataTemplate CellTemplate
        {
            get { return (DataTemplate)GetValue(CellTemplateProperty); }
            set { SetValue(CellTemplateProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.CellTemplate dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.CellTemplate dependency property.
        /// </remarks>         
        public static readonly DependencyProperty CellTemplateProperty =
            GridDependencyProperty.Register("CellTemplate", typeof(DataTemplate), typeof(GridColumnBase), new GridPropertyMetadata(null, OnCellTemplateChanged));
        
        /// <summary>
        /// Dependency call back for CellTemplate property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e"></param>
        private static void OnCellTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnCellTemplateChanged(e);
        }

        protected virtual void OnCellTemplateChanged(DependencyPropertyChangedEventArgs e)
        {
            this.hasCellTemplate = e.NewValue != null;
            if (this.SetCellBoundValue && e.NewValue != null)
                this.canUpdateBinding = true;
            else
                this.canUpdateBinding = false;

        }

        /// <summary>
        /// Gets or sets a value that indicates whether the data context of <see cref="Syncfusion.UI.Xaml.Grid.TreeGridColumn.CellTemplate"/> or <see cref="Syncfusion.UI.Xaml.Grid.TreeGridTemplateColumn.EditTemplate"/> is <see cref="T:Syncfusion.UI.Xaml.Grid.Cells.DataContextHelper"/> instead of Record.      
        /// </summary>
        /// <remarks>
        /// The SetCellBoundValue allows you to bind value based on MappingName property. So ,you can reuse the same template to more than one columns.
        /// with regardless of MappingName.
        /// </remarks>
        /// <value>
        /// <b>true</b> if the data context of cell or edit template is DataContextHelper
        /// class;otherwise,<b>false</b>. The default value is <b>false</b>.
        /// </value>
        public bool SetCellBoundValue
        {
            get { return (bool)GetValue(SetCellBoundValueProperty); }
            set { SetValue(SetCellBoundValueProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.TreeGridColumn.SetCellBoundValue dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.TreeGridColumn.SetCellBoundValue dependency property.
        /// </remarks>         
        public static readonly DependencyProperty SetCellBoundValueProperty =
            DependencyProperty.Register("SetCellBoundValue", typeof(bool), typeof(GridColumnBase), new PropertyMetadata(false, OnSetCellBoundValueChanged));

        /// <summary>
        /// Dependency call back for SetCellBoundValue property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e"></param>
        private static void OnSetCellBoundValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
           (d as GridColumnBase).OnSetCellBoundValueChanged(e);
        }

        internal virtual void OnSetCellBoundValueChanged(DependencyPropertyChangedEventArgs e)
        {            
            if ((this.hasCellTemplate || this.hasCellTemplateSelector) && (bool)e.NewValue)
                this.canUpdateBinding = true;
            else
                this.canUpdateBinding = false;
        }

        /// <summary>
        /// Gets or sets the <see cref="System.Windows.DataTemplate"/> by choosing a template based on data.
        /// </summary>
        /// <value>
        /// A custom <see cref="System.Windows.Controls.DataTemplateSelector"/> object that chooses the <see cref="System.Windows.DataTemplate"/> based on data. The default value is <b>null</b>.
        /// </value>   
        /// <seealso cref="P:Syncfusion.UI.Xaml.Grid.TreeGridColumn.CellTemplate"/>
        public DataTemplateSelector CellTemplateSelector
        {
            get { return (DataTemplateSelector)GetValue(CellTemplateSelectorProperty); }
            set { SetValue(CellTemplateSelectorProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.TreeGridColumn.CellTemplateSelector dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.TreeGridColumn.CellTemplateSelector dependency property.
        /// </remarks>         
        public static readonly DependencyProperty CellTemplateSelectorProperty =
            GridDependencyProperty.Register("CellTemplateSelector", typeof(DataTemplateSelector), typeof(GridColumnBase), new GridPropertyMetadata(null, OnCellTemplateSelectorChanged));

        ///<summary>
        /// Dependency call back for CellTemplateSelector property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnCellTemplateSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnCellTemplateSelectorChanged(e);
        }

        /// <summary>
        /// Invoked when the <see cref="Syncfusion.UI.Xaml.Grid.TreeGridColumn.CellTemplateSelector"/> dependency property is changed in column.
        /// </summary>
        /// <param name="e">
        /// The <see cref="System.Windows.DependencyPropertyChangedEventArgs"/> that contains data for the <b>CellTemplateSelector</b> dependency property changes.
        /// </param>
        protected virtual void OnCellTemplateSelectorChanged(DependencyPropertyChangedEventArgs e)
        {
            this.hasCellTemplateSelector = e.NewValue != null;
            if (this.SetCellBoundValue && e.NewValue != null)
                this.canUpdateBinding = true;
            else
                this.canUpdateBinding = false;
        }
        
        /// <summary>
        /// Gets or sets the style applied all the cells in column.
        /// </summary>
        /// <value>
        /// The style that is applied to all the record cells in column. The default value is <b>null</b>.
        /// </value>
        /// <remarks>
        /// To define a <see cref="System.Windows.Style"/> for a cell, specify a TargetType of <see cref="Syncfusion.UI.Xaml.Grid.GridCell"/>.
        /// </remarks>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.CellStyle"/>
        public Style CellStyle
        {
            get { return (Style)GetValue(CellStyleProperty); }
            set
            {
                SetValue(CellStyleProperty, value);
                if (this.ReadLocalValue(CellStyleProperty) != DependencyProperty.UnsetValue)
                {
                    hasCellStyle = true;                    
                    this.OnCellStyleChanged();
                }
            }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.CellStyle dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.CellStyle dependency property.
        /// </remarks>         
        public static readonly DependencyProperty CellStyleProperty =
            GridDependencyProperty.Register("CellStyle", typeof(Style), typeof(GridColumnBase), new GridPropertyMetadata(null, OnCellStyleChanged));

        /// <summary>
        /// Gets or sets the style applied to record cell conditionally based on data in GridColumn.        
        /// </summary>
        /// <value>
        /// A <see cref="System.Windows.Controls.StyleSelector"/> object that chooses the style to cell based on data. The default value is <b>null</b>.
        /// </value>
        /// <remarks>
        /// To define a <see cref="System.Windows.Style"/> for a cell, specify a TargetType of <see cref="Syncfusion.UI.Xaml.Grid.GridCell"/>.
        /// </remarks>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.GridColumn.CellStyle"/>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.CellStyleSelector"/>
        public StyleSelector CellStyleSelector
        {
            get { return (StyleSelector)GetValue(CellStyleSelectorProperty); }
            set { SetValue(CellStyleSelectorProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.CellStyleSelector dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.CellStyleSelector dependency property.
        /// </remarks>         
        public static readonly DependencyProperty CellStyleSelectorProperty =
            GridDependencyProperty.Register("CellStyleSelector", typeof(StyleSelector), typeof(GridColumnBase), new GridPropertyMetadata(null, OnCellStyleSelectorChanged));

        /// <summary>
        /// Gets or sets the style applied to the header cell in GridColumn.
        /// </summary>
        /// <value>
        /// The style that is applied to the header cell in GridColumn. The default value is <b>null</b>.
        /// </value>
        /// <remarks>
        /// To define a <see cref="System.Windows.Style"/> for a header cell, specify a TargetType of <see cref="Syncfusion.UI.Xaml.Grid.GridHeaderCellControl"/>.
        /// </remarks>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.HeaderStyle"/>
        public Style HeaderStyle
        {
            get
            {
                return (Style)GetValue(HeaderStyleProperty);
            }
            set
            {
                SetValue(HeaderStyleProperty, value);
                if (this.ReadLocalValue(HeaderStyleProperty) != DependencyProperty.UnsetValue)
                {
                    hasHeaderStyle = true;
                    this.OnHeaderStyleChanged();
                }
            }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderStyle dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.HeaderStyle dependency property.
        /// </remarks>         
        public static readonly DependencyProperty HeaderStyleProperty =
            GridDependencyProperty.Register("HeaderStyle", typeof(Style), typeof(GridColumnBase), new GridPropertyMetadata(null, OnHeaderStyleChanged));
        
        /// <summary>
        /// Dependency call back for CellStyle property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnCellStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            if (column == null) return;
            column.hasCellStyle = true;
            column.OnCellStyleChanged();
        }

        internal virtual void OnCellStyleChanged()
        {

        }

        /// <summary>
        /// Dependency call back for CellStyleSelector property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnCellStyleSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            if (column != null)
            {
                column.hasCellStyleSelector = e.NewValue != null;
                column.OnCellStyleSelectorChanged();
            }
        }

        internal virtual void OnCellStyleSelectorChanged()
        {

        }

        /// <summary>
        /// Dependency call back for HeaderStyle property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnHeaderStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            if (column == null)
                return;

            column.hasHeaderStyle = true;
            column.OnHeaderStyleChanged();
        }
        
        internal virtual void OnHeaderStyleChanged()
        {

        }

        /// <summary>
        /// Gets or sets a value that indicates whether the user can sort the data by clicking on its header cell of column.
        /// </summary>
        /// <value>
        /// <b>true</b> if the user can sort the data by clicking column header; otherwise, <b>false</b>. The default value is <b>true</b>.
        /// </value>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.SfDataGrid.AllowSorting"/>
        public bool AllowSorting
        {
            get
            {
                var valueColumn = this.ReadLocalValue(GridColumnBase.AllowSortingProperty);
                if (GridBase != null && valueColumn == DependencyProperty.UnsetValue)
                    return this.GridBase.AllowSorting;
                else
                    return (bool)GetValue(AllowSortingProperty);
            }
            set { SetValue(AllowSortingProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.AllowSorting dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.AllowSorting dependency property.
        /// </remarks>        
        public static readonly DependencyProperty AllowSortingProperty =
            GridDependencyProperty.Register("AllowSorting", typeof(bool), typeof(GridColumnBase), new GridPropertyMetadata(true, OnAllowSortChanged));

        /// <summary>
        /// Dependency call back for AllowSorting property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnAllowSortChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnAllowSortChanged(e);
        }

        internal virtual void OnAllowSortChanged(DependencyPropertyChangedEventArgs e)
        {
           
        }

        /// <summary>        
        /// Gets or sets the vertical alignment for the cells of the column.
        /// </summary>
        /// <value>
        /// One of the <see cref="System.Windows.VerticalAlignment"/> enumeration that
        /// specifies the vertical alignment of the column. The default is <see cref="System.Windows.VerticalAlignment">Center.</see>
        /// </value>
        public VerticalAlignment VerticalAlignment
        {
            get { return (VerticalAlignment)GetValue(VerticalAlignmentProperty); }
            set { SetValue(VerticalAlignmentProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.VerticalAlignment dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.VerticalAlignment dependency
        /// property.
        /// </remarks>    
        public static readonly DependencyProperty VerticalAlignmentProperty =
            GridDependencyProperty.Register("VerticalAlignment", typeof(VerticalAlignment), typeof(GridColumnBase), new GridPropertyMetadata((VerticalAlignment.Center), OnUpdateBindingInfo));

        /// <summary>
        /// Gets or sets the horizontal alignment property for the text.
        /// </summary>
        /// <value>
        /// One of the <see cref="System.Windows.TextAlignment"/> enumeration that specifies the
        /// horizontal alignment for the text. 
        /// The default value <see cref="System.Windows.TextAlignment">Left.</see>
        /// </value>
        public TextAlignment TextAlignment
        {
            get { return (TextAlignment)GetValue(TextAlignmentProperty); }
            set { SetValue(TextAlignmentProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.TextAlignment dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.TextAlignment dependency
        /// property.
        /// </remarks>        
        public static readonly DependencyProperty TextAlignmentProperty =
            GridDependencyProperty.Register("TextAlignment", typeof(TextAlignment), typeof(GridColumnBase), new GridPropertyMetadata((TextAlignment.Left), OnUpdateBindingInfo));


        /// <summary>
        /// Gets or sets the horizontal alignment for the header content of the column.
        /// </summary>
        /// <value>
        /// One of the <see cref="System.Windows.HorizontalAlignment"/> enumeration that aligns the
        /// header content horizontally.
        /// </value>
        public HorizontalAlignment HorizontalHeaderContentAlignment
        {
            get { return (HorizontalAlignment)GetValue(HorizontalHeaderContentAlignmentProperty); }
            set { SetValue(HorizontalHeaderContentAlignmentProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.HorizontalHeaderContentAlignment dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.HorizontalHeaderContentAlignment dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty HorizontalHeaderContentAlignmentProperty =
           GridDependencyProperty.Register("HorizontalHeaderContentAlignment", typeof(HorizontalAlignment), typeof(GridColumnBase), new GridPropertyMetadata(HorizontalAlignment.Center, OnUpdateBindingInfo));

        /// <summary>
        /// Gets or sets the width of column .
        /// </summary>
        /// <value>
        /// The width of column.
        /// </value>        
        public double Width
        {
            get { return (double)GetValue(WidthProperty); }
            set { SetValue(WidthProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.Width dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.Width dependency property.
        /// </remarks>        
        public static readonly DependencyProperty WidthProperty =
            GridDependencyProperty.Register("Width", typeof(double), typeof(GridColumnBase), new GridPropertyMetadata(Double.NaN, OnWidthChanged));

        /// <summary>
        /// Dependency call back for Width property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnWidthChanged(e);
        }

        internal virtual void OnWidthChanged(DependencyPropertyChangedEventArgs e)
        {
            
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the column is hidden from the view.
        /// </summary>
        /// <value>
        /// <b>true</b> if the column is hidden from the view ; otherwise, <b>false</b>/>. 
        /// The default value ,<b>false</b>. 
        /// </value>        
        public bool IsHidden
        {
            get { return (bool)GetValue(IsHiddenProperty); }
            set { SetValue(IsHiddenProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.IsHidden dependency property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.IsHidden dependency property.
        /// </remarks>        
        public static readonly DependencyProperty IsHiddenProperty =
            GridDependencyProperty.Register("IsHidden", typeof(bool), typeof(GridColumnBase), new GridPropertyMetadata(false, OnIsHiddenChanged));


        /// <summary>
        /// Dependency call back for IsHidden property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnIsHiddenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnIsHiddenChanged(e);
        }

        internal virtual void OnIsHiddenChanged(DependencyPropertyChangedEventArgs e)
        {

        }

        /// <summary>
        /// Gets or sets the upper bound for the width of the column.
        /// </summary>
        /// <value>
        /// The maximum width constraint for the column .The default value is <b>Double.NaN</b> .
        /// </value>
        /// <remarks></remarks>
        public double MaximumWidth
        {
            get { return (double)GetValue(MaximumWidthProperty); }
            set { SetValue(MaximumWidthProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.MaximumWidth dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.MaximumWidth dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty MaximumWidthProperty =
            GridDependencyProperty.Register("MaxWidth", typeof(double), typeof(GridColumnBase), new GridPropertyMetadata(Double.NaN, OnMaximumWidthChanged));

        /// <summary>
        /// Dependency call back for MaximumWidth property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnMaximumWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnMaximumWidthChanged(e);
        }

        internal virtual void OnMaximumWidthChanged(DependencyPropertyChangedEventArgs e)
        {

        }

        /// <summary>
        /// Gets or sets the lower bound for the width of the column.
        /// </summary>
        /// <value>
        /// The minimum width constraint of the column . The default value is <b>Double.NaN</b> .
        /// </value>        
        public double MinimumWidth
        {
            get { return (double)GetValue(MinimumWidthProperty); }
            set { SetValue(MinimumWidthProperty, value); }
        }

        /// <summary>
        /// Identifies the Syncfusion.UI.Xaml.Grid.GridColumn.MinimumWidth dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the Syncfusion.UI.Xaml.Grid.GridColumn.MinimumWidth dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty MinimumWidthProperty =
            GridDependencyProperty.Register("MinWidth", typeof(double), typeof(GridColumnBase), new GridPropertyMetadata(Double.NaN, OnMinimumWidthChanged));


        /// <summary>
        /// Dependency call back for MinimumWidth property.
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e">An <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">DependencyPropertyChangedEventArgs</see> that contains the event data.</param>
        /// <remarks></remarks>
        private static void OnMinimumWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            (d as GridColumnBase).OnMinimumWidthChanged(e);
        }

        internal virtual void OnMinimumWidthChanged(DependencyPropertyChangedEventArgs e)
        {

        }


#endregion

        private BindingBase _valueBinding;

        /// <summary>
        /// Gets or sets the data item to bind to the edit element of column.
        /// </summary>
        /// <value>
        /// The specified data item that displays the edit element of column.
        /// </value>
        /// <remarks>
        /// You can format the binding by setting <see cref="System.Windows.Data.Binding.Converter"/>.
        /// </remarks>
        public BindingBase ValueBinding
        {
            get
            {
                if (_valueBinding == null && !String.IsNullOrEmpty(MappingName))
                {
                    _valueBinding = MappingName.CreateEditableBinding(this, true);
                    if (_valueBinding != null)
                        SetValueBindingConverter();
                    if (_columnWrapper != null)
                        _columnWrapper.SetValueBinding(_valueBinding);
                    isvaluebindingcreated = true;
                }
                else if (_valueBinding == null && _displayBinding != null)
                {
                    _valueBinding = _displayBinding.CreateEditBinding(false, this);
                    if (_columnWrapper != null)
                        _columnWrapper.SetValueBinding(_valueBinding);
                    if (_valueBinding != null)
                        SetValueBindingConverter();
                    isvaluebindingcreated = true;
                    isValueMultiBinding = isDisplayMultiBinding;
                }
                return _valueBinding;
            }
            set
            {
                SetValueBinding(false, value);
            }
        }
        /// <summary>
        /// Sets the converter for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ValueBinding"/> of column.
        /// </summary>
        /// <remarks>
        /// You can override this method to specify the converter for <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ValueBinding"/>.
        /// </remarks>
        protected virtual void SetValueBindingConverter()
        {

        }
        internal virtual void SetValueBinding(bool internalset, BindingBase value)
        {
#if WPF
            if (value is MultiBinding)
                isValueMultiBinding = true;
#endif
            _valueBinding = value;
            if (_columnWrapper != null)
                _columnWrapper.SetValueBinding(_valueBinding);
            if (!internalset)
                isvaluebindingcreated = false;
        }

        private BindingBase _displayBinding;
        /// <summary>
        /// Gets or sets the data item to bind to display element of column.
        /// </summary>
        /// <value>
        /// The specified data item that displays in the column.
        /// </value>
        /// <remarks>
        /// You can format the binding by setting <see cref="System.Windows.Data.BindingBase.StringFormat"/> or <see cref="System.Windows.Data.Binding.Converter"/>.
        /// </remarks>
        public BindingBase DisplayBinding
        {
            get
            {
                if (_displayBinding == null && ValueBinding != null)
                {
                    isdisplayingbindingcreated = true;
                    _displayBinding = ValueBinding.CreateDisplayBinding(false,this);
                    SetDisplayBindingConverter();
                    if (_displaycolumnWrapper != null)
                        _displaycolumnWrapper.SetDisplayBinding(_displayBinding);
                    isDisplayMultiBinding = isValueMultiBinding;
                }
                return _displayBinding;
            }
            set
            {
                SetDisplayBinding(false, value);
            }
        }

        /// <summary>
        /// Sets the converter for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.DisplayBinding"/> of column.
        /// </summary>
        /// <remarks>
        /// You can override this method to specify the converter for <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.DisplayBinding"/>.
        /// </remarks>
        protected virtual void SetDisplayBindingConverter()
        {

        }
        /// <summary>
        /// Gets or sets value that indicates whether the tool tip should be displayed when mouse hovered on the header cell.
        /// </summary>
        /// <value>
        /// <b>true </b> if the tool tip is enabled on the header cell of column; otherwise, <b>false</b>. The default value is <b>false</b>.
        /// </value>
        public bool ShowHeaderToolTip
        {
            get { return (bool)GetValue(ShowHeaderToolTipProperty); }
            set { SetValue(ShowHeaderToolTipProperty, value); }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ShowHeaderToolTip"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ShowHeaderToolTip"/>  dependency
        /// property.
        /// </remarks>        
        public static readonly DependencyProperty ShowHeaderToolTipProperty =
            DependencyProperty.Register("ShowHeaderToolTip", typeof(bool), typeof(GridColumnBase), new PropertyMetadata(false));

        /// <summary>
        /// Gets or sets the <see cref="DataTemplate"/> that defines the visual representation of a tool tip for the record cell in a corresponding column.
        /// </summary>
        /// <value>
        /// The object that defines the visual representation of tool tip for the record cell in corresponding column. The default value is <b>null</b>.
        /// </value>
        /// <remarks>
        /// The <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.SetCellBoundToolTip"/> decides whether the data context of the <b>ToolTipTemplate</b> is based on record or <see cref="Syncfusion.UI.Xaml.Grid.Cells.DataContextHelper"/> class.        
        /// By default, record will be the DataContext of ToolTipTemplate. If SetCellBoundValue is true, the <see cref="Syncfusion.UI.Xaml.Grid.Cells.DataContextHelper"/> will be act as data context.        
        ///</remarks>
        public DataTemplate ToolTipTemplate
        {
            get { return (DataTemplate)GetValue(ToolTipTemplateProperty); }
            set { SetValue(ToolTipTemplateProperty, value); }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplate"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplate"/> dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty ToolTipTemplateProperty =
            DependencyProperty.Register("ToolTipTemplate", typeof(DataTemplate), typeof(GridColumnBase), new PropertyMetadata(null, OnToolTipTemplateChanged));

        /// <summary>
        /// Gets or sets <see cref="DataTemplate"/> that defines the visual representation of tool tip for header cell in corresponding column.
        /// </summary>    
        /// <value>
        /// The object that defines the visual representation of tool tip for header cell in corresponding column. The default value is <b>null</b>.
        /// </value>
        /// <seealso cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ShowHeaderToolTip"/>
        public DataTemplate HeaderToolTipTemplate
        {
            get { return (DataTemplate)GetValue(HeaderToolTipTemplateProperty); }
            set { SetValue(HeaderToolTipTemplateProperty, value); }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.HeaderToolTipTemplate"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.HeaderToolTipTemplate"/> dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty HeaderToolTipTemplateProperty =
            DependencyProperty.Register("HeaderToolTipTemplate", typeof(DataTemplate), typeof(GridColumnBase), new PropertyMetadata(null, OnHeaderToolTipTemplateChanged));

        /// <summary>
        /// Gets or sets the <see cref="DataTemplateSelector"/> based on custom logic for tool-tip content.
        /// </summary>
        /// <value>
        /// A custom <see cref="DataTemplateSelector"/> object that provides logic and returns a <see cref="DataTemplate"/>. The default value is <b>null</b>.
        /// </value>           
        /// <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplate"/>
        public DataTemplateSelector ToolTipTemplateSelector
        {
            get { return (DataTemplateSelector)GetValue(ToolTipTemplateSelectorProperty); }
            set { SetValue(ToolTipTemplateSelectorProperty, value); }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplateSelector"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplateSelector"/> dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty ToolTipTemplateSelectorProperty =
            DependencyProperty.Register("ToolTipTemplateSelector", typeof(DataTemplateSelector), typeof(GridColumnBase), new PropertyMetadata(null, OnToolTipTemplateSelectorChanged));

        /// <summary>
        /// Gets or sets value that indicates whether the tool tip is enabled in a particular column.
        /// </summary>
        /// <value>
        /// <b>true </b> if the tool tip is enabled in the column; otherwise, <b>false</b>. The default value is <b>false</b>.
        /// </value>
        public bool ShowToolTip
        {
            get
            {
                var valueColumn = this.ReadLocalValue(ShowToolTipProperty);
                if (GridBase != null && valueColumn == DependencyProperty.UnsetValue)
                    return this.GridBase.ShowToolTip;
                return (bool)GetValue(ShowToolTipProperty);
            }
            set
            {
                SetValue(ShowToolTipProperty, value);
            }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ShowToolTip"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ShowToolTip"/> dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty ShowToolTipProperty =
            DependencyProperty.Register("ShowToolTip", typeof(bool), typeof(GridColumnBase), new PropertyMetadata(false));

        private static void OnToolTipTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            column.hasToolTipTemplate = e.NewValue != null;
        }

        private static void OnHeaderToolTipTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            column.hasHeaderToolTipTemmplate = e.NewValue != null;
        }
        private static void OnToolTipTemplateSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var column = (d as GridColumnBase);
            column.hasToolTipTemplateSelector = e.NewValue != null;
        }
        /// <summary>
        /// Gets or sets a value that indicates whether the data context of <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.ToolTipTemplate"/> is <see cref="T:Syncfusion.UI.Xaml.Grid.Cells.DataContextHelper"/> instead of Record.       
        /// </summary>
        /// <remarks>
        /// The SetCellBoundToolTip allows you to bind value based on MappingName property. So, you can reuse the same template to more than one columns.
        /// with regardless of MappingName.
        /// </remarks>
        /// <value>
        /// <b>true</b> if data context of tool tip template is based on DataContextHelper
        /// class;otherwise ,<b>false</b>. The default value is <b>false</b>.
        /// </value>  
        public bool SetCellBoundToolTip
        {
            get { return (bool)GetValue(SetCellBoundToolTipProperty); }
            set { SetValue(SetCellBoundToolTipProperty, value); }
        }

        /// <summary>
        /// Identifies the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.SetCellBoundToolTip"/> dependency
        /// property.
        /// </summary>
        /// <remarks>
        /// The identifier for the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.SetCellBoundToolTip"/> dependency
        /// property.
        /// </remarks>
        public static readonly DependencyProperty SetCellBoundToolTipProperty =
            DependencyProperty.Register("SetCellBoundToolTip", typeof(bool), typeof(GridColumnBase), new PropertyMetadata(false));

        #region Private Methods
        /// <summary>
        /// Computes the Padding for the Display UIElement.
        /// </summary>
        /// <param name="column">The column.</param>
        /// <returns></returns>
        internal virtual void ProcessUIElementPadding(GridColumnBase column)
        {

        }


        #endregion

        internal virtual void SetDisplayBinding(bool internalset, BindingBase value)
        {
#if WPF
            if (value is MultiBinding)
                isDisplayMultiBinding = true;
#endif
            _displayBinding = value;
            if (_displayBinding != null)
                SetDisplayBindingConverter();
            if (_displaycolumnWrapper != null)
                _displaycolumnWrapper.SetDisplayBinding(_displayBinding);
            if (!internalset)
                isdisplayingbindingcreated = false;
        }

#if WPF
        protected override Freezable CreateInstanceCore()
        {
            throw new NotImplementedException();
        }
#endif
        protected internal virtual bool CanEditCell()
        {
            return true;
        }

        internal virtual void UpdateBindingInfo()
        {

        }

        internal virtual double GetFilterIconWidth()
        {
            return 0;
        }


        //When AllowEditing of a column or grid changed, we need to update the edit bindings.
        //other than the image and hyper link columns, edit bindings are updated.
        /// <summary>
        /// Updates the binding for the AllowEdit property changes in the column.
        /// </summary>             
        protected internal virtual void UpdateBindingBasedOnAllowEditing()
        {

        }
        /// <summary>
        /// Updates the binding for <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase.GridValidationMode"/> property changes in the column.
        /// </summary>
        /// <param name="gridValidationMode">
        /// Specifies the corresponding validation mode for update binding.
        /// </param>
        public void UpdateBindingForValidation(GridValidationMode gridValidationMode)
        {

            if (this.ValueBinding != null)
            {
                BindingBase bind = this.ValueBinding.CreateEditBinding(gridValidationMode != GridValidationMode.None, this);
                this.SetValueBinding(true, bind);
            }

            if (this.DisplayBinding != null)
            {
                BindingBase bind = this.DisplayBinding.CreateDisplayBinding(gridValidationMode != GridValidationMode.None, this);
                this.SetDisplayBinding(true, bind);
            }

        }

        internal virtual void OnColumnPropertyChanged(string property)
        {

        }

#if WPF
        /// <summary>
        /// Gets Typeface to render the content of GridCell.
        /// </summary>
        /// <param name="gridColumn"></param>
        /// <param name="gridCell"></param>
        /// <returns></returns>
        protected internal virtual Typeface GetTypeface(GridColumnBase gridColumn, GridCell gridCell)
        {
            if (gridColumn.drawingTypeface == null)
                gridColumn.drawingTypeface = new Typeface(gridCell.FontFamily, gridCell.FontStyle, gridCell.FontWeight, gridCell.FontStretch);

            return gridColumn.drawingTypeface;
        }
#endif

        /// <summary>
        /// Disposes all the resources used by the <see cref="Syncfusion.UI.Xaml.Grid.GridColumnBase"/> class.
        /// </summary>
        /// <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        protected override void Dispose(bool isDisposing)
        {
            if (isdisposed)
                return;
            if (isDisposing)
                this.GridBase = null;
            isdisposed = true;
            base.Dispose(isDisposing);
        }
    }
}
